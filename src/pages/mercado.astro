---
// src/pages/leagues/[id]/market.astro
import DefaultLayout from '../layouts/DefaultLayout.astro';
import { supabase } from '../lib/supabase';

const { id } = Astro.params;

// Datos temporales - luego los conectaremos a Supabase
const user_id = 'e01005c8-1f15-4ca7-a1e9-7d423b84cc77';
const league_id = '586b1a73-3247-48ff-a8fa-48d17139fdfa';

// Obtener el presupuesto del usuario
const { data: userBudgetData, error: budgetError } = await supabase
  .from('league_participants')
  .select('budget_remaining')
  .eq('user_id', user_id)
  .eq('league_id', league_id)
  .single();

if (budgetError) {
  console.error('Error al cargar el presupuesto:', budgetError.message);
  throw new Error(budgetError.message);
}

// Obtener las subastas activas del mercado actual
// Estas son las subastas que ya están configuradas y activas
const { data: activeAuctionsRaw, error: auctionsError } = await supabase
  .from('market_auctions')
  .select(`
    id,
    seller_id,
    current_bidder_id,
    current_bid,
    min_bid,
    ends_at,
    status,
    lec_players!inner(id, name, position, team, market_value)
  `)
  .eq('status', 'active')
  .gt('ends_at', new Date().toISOString())
  .order('ends_at', { ascending: true });

if (auctionsError) {
  console.error('Error al cargar las subastas:', auctionsError.message);
  throw new Error(auctionsError.message);
}

// Si no hay subastas activas, necesitamos crear nuevas con jugadores libres
let activeAuctions = [];

if (activeAuctionsRaw.length === 0) {
  // Obtener jugadores libres (que no están en ninguna plantilla)
  const { data: freePlayersRaw, error: freePlayersError } = await supabase
    .from('lec_players')
    .select('id, name, position, team, market_value')
    .not('id', 'in', `(
      SELECT player_id FROM user_teams 
      WHERE league_id = '${league_id}'
    )`);

  if (freePlayersError) {
    console.error('Error al obtener jugadores libres:', freePlayersError.message);
    throw new Error(freePlayersError.message);
  }

  // Seleccionar 3 jugadores aleatorios
  const shuffled = freePlayersRaw.sort(() => 0.5 - Math.random());
  const selectedPlayers = shuffled.slice(0, 3);

  // Crear nuevas subastas para estos jugadores
  const now = new Date();
  const auctionEndTime = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24 horas desde ahora

  const newAuctions = selectedPlayers.map(player => ({
    seller_id: null, // No hay vendedor, son jugadores libres
    current_bidder_id: null,
    current_bid: 0,
    min_bid: Math.floor(player.market_value * 0.5), // Puja mínima: 50% del valor de mercado
    ends_at: auctionEndTime.toISOString(),
    status: 'active',
    player_id: player.id
  }));

  // Insertar las nuevas subastas en la base de datos
  const { data: insertedAuctions, error: insertError } = await supabase
    .from('market_auctions')
    .insert(newAuctions)
    .select(`
      id,
      seller_id,
      current_bidder_id,
      current_bid,
      min_bid,
      ends_at,
      status,
      player_id
    `);

  if (insertError) {
    console.error('Error al crear nuevas subastas:', insertError.message);
    throw new Error(insertError.message);
  }

  // Formatear las subastas recién creadas
  activeAuctions = insertedAuctions.map(auction => {
    const player = selectedPlayers.find(p => p.id === auction.player_id);
    const endTime = new Date(auction.ends_at);
    const now = new Date();
    const timeLeft = endTime.getTime() - now.getTime();
    
    // Calcular tiempo restante en formato HH:MM:SS
    const hours = Math.floor(timeLeft / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
    
    const timeLeftFormatted = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    return {
      id: auction.id,
      player: {
        id: player.id,
        name: player.name,
        position: player.position,
        team: player.team,
        value: player.market_value
      },
      currentBid: auction.current_bid,
      minBid: auction.min_bid,
      timeLeft: timeLeftFormatted,
      bidCount: 0, // Nuevas subastas empiezan con 0 pujas
      endTime: auction.ends_at,
      userBid: null // No hay puja del usuario aún
    };
  });

} else {
  // Obtener las pujas del usuario para las subastas activas
  const auctionIds = activeAuctionsRaw.map(auction => auction.id);
  
  const { data: userBids, error: userBidsError } = await supabase
    .from('auction_bids')
    .select('auction_id, bid_amount')
    .eq('bidder_id', user_id)
    .in('auction_id', auctionIds);

  if (userBidsError) {
    console.error('Error al obtener pujas del usuario:', userBidsError.message);
  }

  // Procesar las subastas activas existentes
  activeAuctions = activeAuctionsRaw.map(auction => {
    const player = auction.lec_players;
    const endTime = new Date(auction.ends_at);
    const now = new Date();
    const timeLeft = endTime.getTime() - now.getTime();
    
    // Calcular tiempo restante en formato HH:MM:SS
    const hours = Math.floor(timeLeft / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
    
    const timeLeftFormatted = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    // Buscar la puja del usuario para esta subasta
    const userBid = userBids?.find(bid => bid.auction_id === auction.id);
    
    return {
      id: auction.id,
      player: {
        id: player.id,
        name: player.name,
        position: player.position,
        team: player.team,
        value: player.market_value
      },
      currentBid: auction.current_bid,
      minBid: auction.min_bid,
      timeLeft: timeLeftFormatted,
      bidCount: auction.current_bid > 0 ? 1 : 0, // Estimación simple
      endTime: auction.ends_at,
      userBid: userBid ? userBid.bid_amount : null
    };
  });
}

// Datos del mercado
const marketData = {
  currentRound: 3, // Esto podrías obtenerlo de una tabla de configuración
  timeRemaining: activeAuctions.length > 0 ? activeAuctions[0].timeLeft : "00:00:00", // Tiempo de la primera subasta
  userBudget: userBudgetData.budget_remaining,
  activeAuctions
};
---

<DefaultLayout title="Mercado">
  <div class="market-container">
    <!-- League Sub-Navigation -->
    <div class="league-subnav">
      <div class="subnav-container">
        <div class="league-info">
          <h1 class="league-name">Liga de ejemplo</h1>
          <span class="league-status active">Activa</span>
        </div>
        
        <nav class="subnav-menu">
          <a href={`/leagues/${id}/team`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
            Mi Equipo
          </a>
          <a href={`/leagues/${id}/market`} class="subnav-link active">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="9" cy="21" r="1"></circle>
              <circle cx="20" cy="21" r="1"></circle>
              <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
            </svg>
            Mercado
          </a>
          <a href={`/leagues/${id}/standings`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M8 6l4-4 4 4"></path>
              <path d="M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22"></path>
              <path d="M20 22l-6.828-6.828A4 4 0 0 1 12 12.3V2"></path>
            </svg>
            Clasificación
          </a>
          <a href={`/leagues/${id}/matches`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            Partidos
          </a>
          <a href={`/leagues/${id}/activity`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"></path>
              <path d="M12 6v6l4 2"></path>
            </svg>
            Actividad
          </a>
        </nav>
      </div>
    </div>

    <!-- Market Header -->
    <div class="market-header">
      <div class="market-info">
        <h2 class="page-title">Mercado</h2>
        <p class="page-subtitle">Puja por los jugadores subastados</p>
      </div>
      
      <div class="market-stats">
        <!-- <div class="stat-card">
          <div class="stat-icon round">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"></circle>
              <polyline points="12,6 12,12 16,14"></polyline>
            </svg>
          </div>
          <div class="stat-info">
            <span class="stat-label">Ronda Actual</span>
            <span class="stat-value">{marketData.currentRound}</span>
          </div>
        </div> -->
        
        <div class="stat-card">
          <div class="stat-icon timer">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"></circle>
              <polyline points="12,6 12,12 16,14"></polyline>
            </svg>
          </div>
          <div class="stat-info">
            <span class="stat-label">Tiempo Restante</span>
            <span class="stat-value countdown" id="market-countdown">{marketData.timeRemaining}</span>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon budget">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="12" y1="1" x2="12" y2="23"></line>
              <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
            </svg>
          </div>
          <div class="stat-info">
            <span class="stat-label">Tu Presupuesto</span>
            <span class="stat-value">{marketData.userBudget.toLocaleString()}€</span>
          </div>
        </div>
      </div>
    </div>

    <div class="market-content">
      <!-- Active Auctions -->
      <div class="auctions-section">
        <div class="section-header">
          <h3 class="section-title">
            <svg class="section-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 9V5a3 3 0 0 0-6 0v4"></path>
              <rect x="2" y="9" width="20" height="11" rx="2" ry="2"></rect>
            </svg>
            Subastas Activas
          </h3>
          <span class="section-count">{marketData.activeAuctions.length} jugadores</span>
        </div>
        
        {marketData.activeAuctions.length === 0 ? (
          <div class="no-auctions">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"></circle>
              <path d="M12 8v4"></path>
              <path d="m12 16 .01 0"></path>
            </svg>
            <p>No hay subastas activas en este momento</p>
            <small>Las subastas se reinician cada 24 horas</small>
          </div>
        ) : (
          <div class="auctions-grid">
            {marketData.activeAuctions.map(auction => (
              <div class="auction-card" data-auction-id={auction.id}>
                <div class="auction-header">
                  <div class="player-info">
                    <div class="player-avatar">
                      <span class="position-badge">{auction.player.position}</span>
                    </div>
                    <div class="player-details">
                      <h4 class="player-name">{auction.player.name}</h4>
                      <span class="player-team">{auction.player.team}</span>
                      <span class="player-value">Valor: {auction.player.value.toLocaleString()}€</span>
                    </div>
                  </div>
                  <div class="auction-timer">
                    <span class="timer-label">Termina en</span>
                    <span class="timer-value" data-end-time={auction.endTime}>{auction.timeLeft}</span>
                  </div>
                </div>

                <div class="auction-actions">
                  <div class="bid-input-group">
                    <input 
                      type="number" 
                      class="bid-input" 
                      min={auction.minBid}
                      max={marketData.userBudget}
                      placeholder={`Precio de mercado: ${auction.player.value.toLocaleString()}€`}
                      data-auction-id={auction.id}
                    />
                    <button class="bid-btn" data-auction-id={auction.id} type="button">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M5 12h14"></path>
                        <path d="M12 5l7 7-7 7"></path>
                      </svg>
                      Pujar
                    </button>
                  </div>
                  {auction.userBid && (
                    <div class="user-bid-indicator">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M9 12l2 2 4-4"></path>
                        <circle cx="12" cy="12" r="10"></circle>
                      </svg>
                      <span class="user-bid-text">Tu puja: {auction.userBid.toLocaleString()}€</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Hidden data for JavaScript -->
  <script define:vars={{marketData, user_id, league_id}}>
    window.marketData = marketData;
    window.userId = user_id;
    window.leagueId = league_id;
  </script>
</DefaultLayout>

<style>
  /* League Sub-Navigation */
  .league-subnav {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    margin-bottom: 2rem;
  }

  .subnav-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .league-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .league-name {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0;
  }

  .league-status {
    padding: 0.25rem 0.75rem;
    border-radius: 16px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .league-status.active {
    background: #dcfce7;
    color: #166534;
  }

  .subnav-menu {
    display: flex;
    gap: 0.5rem;
  }

  .subnav-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: #64748b;
    border-radius: 8px;
    transition: all 0.2s ease;
    font-weight: 500;
    font-size: 0.875rem;
  }

  .subnav-link:hover {
    background: #f8fafc;
    color: #475569;
  }

  .subnav-link.active {
    background: #eff6ff;
    color: #1d4ed8;
    border: 1px solid #bfdbfe;
  }

  .subnav-icon {
    width: 18px;
    height: 18px;
  }

  /* Market Container */
  .market-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Market Header */
  .market-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
  }

  .market-info {
    flex: 1;
  }

  .page-title {
    font-size: 2rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0 0 0.5rem 0;
  }

  .page-subtitle {
    color: #64748b;
    margin: 0;
    font-size: 1rem;
  }

  .market-stats {
    display: flex;
    gap: 1rem;
  }

  .stat-card {
    background: white;
    border-radius: 12px;
    padding: 1rem;
    border: 1px solid #e2e8f0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    min-width: 160px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .stat-icon {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .stat-icon.round {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  }

  .stat-icon.timer {
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  }

  .stat-icon.budget {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  }

  .stat-icon svg {
    width: 20px;
    height: 20px;
  }

  .stat-info {
    display: flex;
    flex-direction: column;
  }

  .stat-label {
    font-size: 0.75rem;
    color: #64748b;
    text-transform: uppercase;
    font-weight: 600;
  }

  .stat-value {
    font-size: 1.125rem;
    font-weight: 700;
    color: #1a202c;
  }

  .countdown {
    color: #dc2626;
    font-family: monospace;
  }

  /* Market Content */
  .market-content {
    display: grid;
    gap: 2rem;
  }

  /* Section Headers */
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.25rem;
    font-weight: 600;
    color: #1a202c;
    margin: 0;
  }

  .section-icon {
    width: 20px;
    height: 20px;
    color: #3b82f6;
  }

  .section-count {
    background: #f1f5f9;
    color: #64748b;
    padding: 0.25rem 0.75rem;
    border-radius: 16px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  /* No Auctions State */
  .no-auctions {
    text-align: center;
    padding: 4rem 2rem;
    color: #64748b;
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }

  .no-auctions svg {
    width: 48px;
    height: 48px;
    margin: 0 auto 1rem;
    display: block;
    color: #9ca3af;
  }

  .no-auctions p {
    font-size: 1.125rem;
    font-weight: 500;
    margin: 0 0 0.5rem 0;
    color: #374151;
  }

  .no-auctions small {
    font-size: 0.875rem;
    color: #9ca3af;
  }

  /* Auctions Grid */
  .auctions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 1.5rem;
  }

  .auction-card {
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }

  .auction-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
  }

  .auction-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }

  .player-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex: 1;
  }

  .player-avatar {
    width: 48px;
    height: 48px;
    background: #f1f5f9;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .position-badge {
    font-size: 0.75rem;
    font-weight: 600;
    color: #475569;
  }

  .player-details {
    display: flex;
    flex-direction: column;
  }

  .player-name {
    font-weight: 600;
    color: #1a202c;
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
  }

  .player-team {
    font-size: 0.75rem;
    color: #64748b;
    margin-bottom: 0.25rem;
  }

  .player-value {
    font-size: 0.75rem;
    color: #059669;
    font-weight: 500;
  }

  .auction-timer {
    text-align: right;
    min-width: 80px;
  }

  .timer-label {
    display: block;
    font-size: 0.75rem;
    color: #64748b;
    margin-bottom: 0.25rem;
  }

  .timer-value {
    font-family: monospace;
    font-weight: 600;
    color: #dc2626;
    font-size: 0.875rem;
  }

  /* Auction Actions */
  .auction-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .bid-input-group {
    display: flex;
    gap: 0.5rem;
  }

  .bid-input {
    flex: 1;
    padding: 0.625rem 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 0.875rem;
  }

  .bid-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .bid-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.625rem 1rem;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.875rem;
  }

  .bid-btn:hover {
    background: #1d4ed8;
  }

  .bid-btn svg {
    width: 16px;
    height: 16px;
  }

  .auction-info {
    display: flex;
    justify-content: flex-end;
    font-size: 0.75rem;
    color: #64748b;
  }

  /* User Bid Indicator */
  .user-bid-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: #f0fdf4;
    border: 1px solid #bbf7d0;
    border-radius: 6px;
    margin-top: 0.5rem;
  }

  .user-bid-indicator svg {
    width: 16px;
    height: 16px;
    color: #059669;
  }

  .user-bid-text {
    font-size: 0.875rem;
    font-weight: 500;
    color: #059669;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .subnav-container {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .subnav-menu {
      overflow-x: auto;
      width: 100%;
      padding-bottom: 0.5rem;
    }

    .market-container {
      padding: 0 1rem;
    }

    .market-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .market-stats {
      flex-direction: column;
    }

    .auctions-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .subnav-link span {
      display: none;
    }

    .subnav-link {
      padding: 0.75rem;
    }

    .auction-header {
      flex-direction: column;
      gap: 1rem;
    }

    .auction-timer {
      text-align: left;
    }

    .bid-input-group {
      flex-direction: column;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    
    function updateCountdowns() {
      const countdownElements = document.querySelectorAll('[data-end-time]');
      let earliestEndTime = null;
      
      countdownElements.forEach(function(element) {
        try {
          const endTimeStr = element.getAttribute('data-end-time');
          if (!endTimeStr) return;
          
          const endTime = new Date(endTimeStr);
          if (isNaN(endTime.getTime())) return;
          
          const now = new Date();
          const timeLeft = endTime.getTime() - now.getTime();
          
          if (!earliestEndTime || endTime < earliestEndTime) {
            earliestEndTime = endTime;
          }
          
          if (timeLeft <= 0) {
            element.textContent = '00:00:00';
            element.style.color = '#dc2626';
            
            const auctionCard = element.closest('.auction-card');
            if (auctionCard) {
              const bidInput = auctionCard.querySelector('.bid-input');
              const bidBtn = auctionCard.querySelector('.bid-btn');
              
              if (bidInput) bidInput.disabled = true;
              if (bidBtn) {
                bidBtn.disabled = true;
                bidBtn.textContent = 'Finalizada';
              }
            }
            return;
          }
          
          const hours = Math.floor(timeLeft / (1000 * 60 * 60));
          const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
          
          // Asegurar que los valores son números válidos
          const hoursStr = (hours >= 0 ? hours : 0).toString().padStart(2, '0');
          const minutesStr = (minutes >= 0 ? minutes : 0).toString().padStart(2, '0');
          const secondsStr = (seconds >= 0 ? seconds : 0).toString().padStart(2, '0');
          
          const timeLeftFormatted = hoursStr + ':' + minutesStr + ':' + secondsStr;
          
          if (element && typeof timeLeftFormatted === 'string') {
            element.textContent = timeLeftFormatted;
          }
          
          if (timeLeft < 5 * 60 * 1000) {
            element.style.color = '#dc2626';
          } else if (timeLeft < 30 * 60 * 1000) {
            element.style.color = '#f59e0b';
          } else {
            element.style.color = '#dc2626';
          }
        } catch (error) {
          console.warn('Error updating countdown for element:', element, error);
          if (element) element.textContent = '00:00:00';
        }
      });

      const marketCountdown = document.getElementById('market-countdown');
      if (marketCountdown && earliestEndTime) {
        try {
          const now = new Date();
          const timeLeft = earliestEndTime.getTime() - now.getTime();
          
          if (timeLeft <= 0) {
            marketCountdown.textContent = '00:00:00';
            return;
          }
          
          const hours = Math.floor(timeLeft / (1000 * 60 * 60));
          const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
          
          const hoursStr = (hours >= 0 ? hours : 0).toString().padStart(2, '0');
          const minutesStr = (minutes >= 0 ? minutes : 0).toString().padStart(2, '0');
          const secondsStr = (seconds >= 0 ? seconds : 0).toString().padStart(2, '0');
          
          const timeLeftFormatted = hoursStr + ':' + minutesStr + ':' + secondsStr;
          marketCountdown.textContent = timeLeftFormatted;
        } catch (error) {
          console.warn('Error updating market countdown:', error);
          marketCountdown.textContent = '00:00:00';
        }
      }
    }

    function showBidError(message) {
      const existingError = document.querySelector('.bid-error-inline');
      if (existingError) {
        existingError.remove();
      }
      
      const errorDiv = document.createElement('div');
      errorDiv.className = 'bid-error-inline';
      errorDiv.textContent = message;
      errorDiv.style.cssText = 'background: #fef2f2; border: 1px solid #fecaca; color: #dc2626; padding: 0.5rem 1rem; border-radius: 6px; font-size: 0.875rem; position: fixed; top: 20px; right: 20px; z-index: 1001; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); font-weight: 500;';
      
      document.body.appendChild(errorDiv);
      
      setTimeout(function() {
        if (errorDiv.parentNode) {
          errorDiv.style.opacity = '0';
          errorDiv.style.transition = 'opacity 0.3s ease';
          setTimeout(function() {
            if (errorDiv.parentNode) {
              errorDiv.parentNode.removeChild(errorDiv);
            }
          }, 300);
        }
      }, 4000);
    }

    function showSuccessMessage(message) {
      const successDiv = document.createElement('div');
      successDiv.className = 'success-message';
      successDiv.innerHTML = '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 20px; height: 20px; color: #059669;"><path d="M9 12l2 2 4-4"></path><circle cx="12" cy="12" r="10"></circle></svg><span>' + message + '</span>';
      
      successDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #f0fdf4; border: 1px solid #bbf7d0; color: #059669; padding: 0.75rem 1rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); z-index: 1001; display: flex; align-items: center; gap: 0.5rem; font-weight: 500;';
      
      document.body.appendChild(successDiv);
      
      setTimeout(function() {
        successDiv.style.opacity = '0';
        successDiv.style.transition = 'opacity 0.3s ease';
        setTimeout(function() {
          if (successDiv.parentNode) {
            successDiv.parentNode.removeChild(successDiv);
          }
        }, 300);
      }, 3000);
    }

    setInterval(updateCountdowns, 1000);
    updateCountdowns();

    document.querySelectorAll('.bid-btn').forEach(function(btn) {
      btn.addEventListener('click', async function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const auctionId = btn.getAttribute('data-auction-id');
        const auctionCard = btn.closest('.auction-card');
        const playerName = auctionCard.querySelector('.player-name').textContent;
        const bidInput = auctionCard.querySelector('.bid-input');
        const bidAmount = parseInt(bidInput.value);
        
        // Verificar si el usuario ya tiene una puja
        const existingUserBid = auctionCard.querySelector('.user-bid-indicator');
        const hasExistingBid = existingUserBid !== null;
        
        // Obtener el valor de mercado del jugador desde el placeholder
        const placeholder = bidInput.placeholder;
        const marketValueMatch = placeholder.match(/(\d{1,3}(?:,\d{3})*)/);
        const marketValue = marketValueMatch ? parseInt(marketValueMatch[1].replace(/,/g, '')) : 0;
        
        if (!bidAmount || isNaN(bidAmount)) {
          showBidError('Introduce un monto válido');
          return;
        }
        
        // Si el usuario NO tiene puja previa, debe cumplir con la puja mínima del servidor
        // Si SÍ tiene puja previa, puede pujar cualquier cantidad (incluso menor)
        if (!hasExistingBid && bidAmount < marketValue * 0.5) {
          showBidError('La puja debe ser al menos el 50% del valor de mercado');
          return;
        }
        
        if (bidAmount > window.marketData.userBudget) {
          showBidError('No tienes suficiente presupuesto');
          return;
        }
        
        const originalText = btn.innerHTML;
        btn.innerHTML = '<div style="width: 16px; height: 16px; border: 2px solid transparent; border-top: 2px solid currentColor; border-radius: 50%; animation: spin 1s linear infinite;"></div> Pujando...';
        btn.disabled = true;
        
        try {
          const response = await fetch('/api/placeBid', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              auctionId: auctionId,
              bidAmount: bidAmount,
              userId: window.userId,
              leagueId: window.leagueId
            })
          });

          const result = await response.json();

          if (response.ok && result.success) {
            // En subasta ciega, min_bid nunca cambia, así que no lo actualizamos
            bidInput.value = '';
            
            // Actualizar o crear indicador de puja del usuario
            const actionsDiv = auctionCard.querySelector('.auction-actions');
            const existingIndicator = actionsDiv.querySelector('.user-bid-indicator');
            if (existingIndicator) {
              existingIndicator.remove();
            }
            
            // Crear el indicador EXACTAMENTE como se muestra en la carga inicial
            const userBidIndicator = document.createElement('div');
            userBidIndicator.className = 'user-bid-indicator';
            
            // Aplicar los estilos CSS directamente para asegurar consistencia
            userBidIndicator.style.cssText = `
              display: flex;
              align-items: center;
              gap: 0.5rem;
              padding: 0.5rem 0.75rem;
              background: #f0fdf4;
              border: 1px solid #bbf7d0;
              border-radius: 6px;
              margin-top: 0.5rem;
            `;
            
            userBidIndicator.innerHTML = `
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 16px; height: 16px; color: #059669; flex-shrink: 0;">
                <path d="M9 12l2 2 4-4"></path>
                <circle cx="12" cy="12" r="10"></circle>
              </svg>
              <span class="user-bid-text" style="font-size: 0.875rem; font-weight: 500; color: #059669;">Tu puja: ${result.userBid.toLocaleString()}€</span>
            `;
            
            actionsDiv.appendChild(userBidIndicator);
            
            // Mostrar mensaje de éxito apropiado
            let successMessage;
            if (result.previousBid !== null && result.previousBid !== undefined) {
              if (result.userBid > result.previousBid) {
                successMessage = `Puja aumentada: ${result.previousBid.toLocaleString()}€ → ${result.userBid.toLocaleString()}€`;
              } else if (result.userBid < result.previousBid) {
                successMessage = `Puja reducida: ${result.previousBid.toLocaleString()}€ → ${result.userBid.toLocaleString()}€`;
              } else {
                successMessage = `Puja confirmada: ${result.userBid.toLocaleString()}€`;
              }
            } else {
              successMessage = `Nueva puja registrada: ${result.userBid.toLocaleString()}€`;
            }
            
            showSuccessMessage(successMessage);
            
          } else {
            console.error('Error en respuesta:', result);
            showBidError(result.message || 'Error al realizar la puja');
          }
        } catch (error) {
          console.error('Error placing bid:', error);
          showBidError('Error al realizar la puja. Inténtalo de nuevo.');
        } finally {
          btn.innerHTML = originalText;
          btn.disabled = false;
        }
      });
    });
  });
</script>