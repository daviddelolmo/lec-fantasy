---
// src/pages/leagues/[id]/activity.astro
import DefaultLayout from '../layouts/DefaultLayout.astro';
import { supabase } from '../lib/supabase';

const { id } = Astro.params;

// Datos temporales - luego los conectaremos a Supabase
const user_id = 'e01005c8-1f15-4ca7-a1e9-7d423b84cc77';
const league_id = '586b1a73-3247-48ff-a8fa-48d17139fdfa';

// Obtener actividades de la liga desde Supabase
const { data: activitiesRaw, error: activitiesError } = await supabase
  .from('league_activity')
  .select('*')
  .eq('league_id', league_id)
  .order('created_at', { ascending: false })
  .limit(20);

if (activitiesError) {
  console.error('Error al cargar actividades:', activitiesError.message);
  throw new Error(activitiesError.message);
}

// Función para mapear tipos de actividad a iconos y prioridades
function getActivityConfig(activityType) {
  const configs = {
    'MATCH_WEEK_ENDED': { icon: '🏁', priority: 'high' },
    'PLAYER_TRANSFER': { icon: '💰', priority: 'medium' },
    'PLAYER_SOLD': { icon: '📤', priority: 'low' },
    'TOP_PERFORMER': { icon: '🏆', priority: 'medium' },
    'MARKET_ROUND_STARTED': { icon: '🔄', priority: 'high' },
    'USER_JOINED': { icon: '👋', priority: 'low' },
    'POWER_UP_USED': { icon: '⚡', priority: 'low' },
    'MATCH_STARTED': { icon: '🎮', priority: 'high' },
    'BUDGET_WARNING': { icon: '⚠️', priority: 'low' },
    'WEEKLY_SUMMARY': { icon: '📊', priority: 'medium' },
    'LEAGUE_MILESTONE': { icon: '🎉', priority: 'high' }
  };
  
  return configs[activityType] || { icon: '📋', priority: 'low' };
}

// Función para generar títulos dinámicos
function getActivityTitle(type, metadata) {
  switch (type) {
    case 'PLAYER_TRANSFER':
      return `${metadata.user || 'Usuario'} fichó a ${metadata.player || 'jugador'}`;
    case 'PLAYER_SOLD':
      return `${metadata.user || 'Usuario'} vendió a ${metadata.player || 'jugador'}`;
    case 'TOP_PERFORMER':
      return `${metadata.user || 'Usuario'} lidera la jornada`;
    case 'POWER_UP_USED':
      return `${metadata.user || 'Usuario'} activó power-up`;
    case 'USER_JOINED':
      return `${metadata.user || 'Nuevo miembro'} se unió a la liga`;
    case 'BUDGET_WARNING':
      return `${metadata.user || 'Usuario'} tiene presupuesto bajo`;
    case 'MATCH_WEEK_ENDED':
      return `Jornada ${metadata.week || 'actual'} finalizada`;
    case 'MATCH_STARTED':
      return `Partidos de jornada ${metadata.week || 'actual'} iniciados`;
    case 'MARKET_ROUND_STARTED':
      return 'Nueva ronda de mercado';
    case 'WEEKLY_SUMMARY':
      return `Resumen de jornada ${metadata.week || 'actual'}`;
    case 'LEAGUE_MILESTONE':
      return metadata.title || 'Hito de la liga alcanzado';
    default:
      return 'Actividad de la liga';
  }
}

// Procesar actividades
const activities = activitiesRaw?.map(activity => {
  const config = getActivityConfig(activity.activity_type);
  let metadata = {};
  
  try {
    metadata = activity.metadata ? JSON.parse(activity.metadata) : {};
  } catch (e) {
    console.warn('Error parsing metadata for activity:', activity.id);
    metadata = {};
  }

  return {
    id: activity.id,
    type: activity.activity_type,
    timestamp: activity.created_at,
    title: getActivityTitle(activity.activity_type, metadata),
    description: activity.description,
    details: metadata,
    icon: config.icon,
    priority: config.priority,
    userId: activity.user_id
  };
}) || [];

// Calcular estadísticas dinámicas
const todaysActivities = activities.filter(activity => {
  const today = new Date().toDateString();
  const activityDate = new Date(activity.timestamp).toDateString();
  return today === activityDate;
});

const transfersToday = todaysActivities.filter(a => 
  a.type === 'PLAYER_TRANSFER' || a.type === 'PLAYER_SOLD'
).length;

const matchesTotal = activities.filter(a => 
  a.type === 'MATCH_STARTED' || a.type === 'MATCH_WEEK_ENDED'
).length;

// Datos de actividad con conteos dinámicos
const activityData = {
  activities,
  filters: [
    { id: "all", label: "Todas", count: activities.length },
    { 
      id: "transfers", 
      label: "Fichajes", 
      count: activities.filter(a => a.type === 'PLAYER_TRANSFER' || a.type === 'PLAYER_SOLD').length 
    },
    { 
      id: "matches", 
      label: "Partidos", 
      count: activities.filter(a => a.type === 'MATCH_WEEK_ENDED' || a.type === 'MATCH_STARTED' || a.type === 'TOP_PERFORMER').length 
    },
    { 
      id: "market", 
      label: "Mercado", 
      count: activities.filter(a => a.type === 'MARKET_ROUND_STARTED' || a.type === 'POWER_UP_USED' || a.type === 'BUDGET_WARNING').length 
    },
    { 
      id: "users", 
      label: "Usuarios", 
      count: activities.filter(a => a.type === 'USER_JOINED' || a.type === 'WEEKLY_SUMMARY' || a.type === 'LEAGUE_MILESTONE').length 
    }
  ],
  stats: {
    transfersToday,
    matchesTotal,
    activeMembers: 8 // Esto podrías calcularlo desde league_participants
  }
};
---

<DefaultLayout title="Actividad">
  <div class="activity-container">
    <!-- League Sub-Navigation -->
    <div class="league-subnav">
      <div class="subnav-container">
        <div class="league-info">
          <h1 class="league-name">Liga de ejemplo</h1>
          <span class="league-status active">Activa</span>
        </div>
        
        <nav class="subnav-menu">
          <a href={`/leagues/${id}/team`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
            Mi Equipo
          </a>
          <a href={`/leagues/${id}/market`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="9" cy="21" r="1"></circle>
              <circle cx="20" cy="21" r="1"></circle>
              <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
            </svg>
            Mercado
          </a>
          <a href={`/leagues/${id}/standings`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M8 6l4-4 4 4"></path>
              <path d="M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22"></path>
              <path d="M20 22l-6.828-6.828A4 4 0 0 1 12 12.3V2"></path>
            </svg>
            Clasificación
          </a>
          <a href={`/leagues/${id}/matches`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            Partidos
          </a>
          <a href={`/leagues/${id}/activity`} class="subnav-link active">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"></path>
              <path d="M12 6v6l4 2"></path>
            </svg>
            Actividad
          </a>
        </nav>
      </div>
    </div>

    <!-- Activity Header -->
    <div class="activity-header">
      <div class="header-info">
        <h2 class="page-title">Actividad de la Liga</h2>
        <p class="page-subtitle">Mantente al día con todo lo que ocurre en tu liga</p>
      </div>
      
      <div class="header-actions">
        <button class="refresh-btn" id="refresh-activity">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23 4 23 10 17 10"></polyline>
            <polyline points="1 20 1 14 7 14"></polyline>
            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
          </svg>
          Actualizar
        </button>
        
        <div class="notifications-toggle">
          <input type="checkbox" id="notifications" checked>
          <label for="notifications">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
              <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
            </svg>
            Notificaciones
          </label>
        </div>
      </div>
    </div>

    <div class="activity-content">
      <!-- Activity Filters -->
      <div class="activity-sidebar">
        <div class="filters-section">
          <h3 class="filters-title">Filtrar por tipo</h3>
          <div class="filters-list">
            {activityData.filters.map(filter => (
              <button class={`filter-btn ${filter.id === 'all' ? 'active' : ''}`} data-filter={filter.id}>
                <span class="filter-label">{filter.label}</span>
                <span class="filter-count">{filter.count}</span>
              </button>
            ))}
          </div>
        </div>
        
        <div class="quick-stats">
          <h3 class="stats-title">Resumen</h3>
          <div class="stats-grid">
            <div class="stat-item">
              <div class="stat-icon">💰</div>
              <div class="stat-info">
                <span class="stat-value">{activityData.stats.transfersToday}</span>
                <span class="stat-label">Fichajes hoy</span>
              </div>
            </div>
            <div class="stat-item">
              <div class="stat-icon">🎮</div>
              <div class="stat-info">
                <span class="stat-value">{activityData.stats.matchesTotal}</span>
                <span class="stat-label">Partidos jugados</span>
              </div>
            </div>
            <div class="stat-item">
              <div class="stat-icon">👥</div>
              <div class="stat-info">
                <span class="stat-value">{activityData.stats.activeMembers}</span>
                <span class="stat-label">Miembros activos</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Activity Feed -->
      <div class="activity-feed">
        <div class="feed-header">
          <h3 class="feed-title">Feed de Actividad</h3>
          <div class="feed-controls">
            <button class="sort-btn active" data-sort="newest">Más reciente</button>
            <button class="sort-btn" data-sort="oldest">Más antiguo</button>
          </div>
        </div>
        
        <div class="activity-timeline">
          {activityData.activities.length === 0 ? (
            <div class="no-activities">
              <div class="empty-state">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"></circle>
                  <path d="M12 6v6l4 2"></path>
                </svg>
                <p>No hay actividad reciente</p>
                <small>La actividad aparecerá aquí conforme sucedan eventos en la liga</small>
              </div>
            </div>
          ) : (
            activityData.activities.map((activity, index) => (
              <div class={`activity-item ${activity.priority}`} data-type={activity.type}>
                <div class="activity-timeline-marker">
                  <div class="timeline-dot"></div>
                  {index < activityData.activities.length - 1 && <div class="timeline-line"></div>}
                </div>
                
                <div class="activity-card">
                  <div class="activity-header">
                    <div class="activity-icon">{activity.icon}</div>
                    <div class="activity-meta">
                      <h4 class="activity-title">{activity.title}</h4>
                      <span class="activity-time">
                        {new Date(activity.timestamp).toLocaleString('es-ES', {
                          day: 'numeric',
                          month: 'short',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </span>
                    </div>
                    <div class={`priority-badge ${activity.priority}`}>
                      {activity.priority === 'high' && (
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <circle cx="12" cy="12" r="10"></circle>
                          <line x1="12" y1="8" x2="12" y2="12"></line>
                          <line x1="12" y1="16" x2="12.01" y2="16"></line>
                        </svg>
                      )}
                    </div>
                  </div>
                  
                  <div class="activity-content">
                    <p class="activity-description">{activity.description}</p>
                    
                    {activity.details && Object.keys(activity.details).length > 0 && (
                      <div class="activity-details">
                        {activity.type === 'PLAYER_TRANSFER' && (
                          <div class="transfer-details">
                            <div class="player-info">
                              <span class="player-position">{activity.details.position || 'N/A'}</span>
                              <span class="player-name">{activity.details.player || 'Jugador'}</span>
                              <span class="player-team">({activity.details.team || 'Equipo'})</span>
                            </div>
                            <div class="transfer-amount">{(activity.details.amount || 0).toLocaleString()}€</div>
                          </div>
                        )}
                        
                        {activity.type === 'PLAYER_SOLD' && (
                          <div class="transfer-details">
                            <div class="player-info">
                              <span class="player-position">{activity.details.position || 'N/A'}</span>
                              <span class="player-name">{activity.details.player || 'Jugador'}</span>
                              <span class="player-team">({activity.details.team || 'Equipo'})</span>
                            </div>
                            <div class="transfer-amount sell">{(activity.details.amount || 0).toLocaleString()}€</div>
                          </div>
                        )}
                        
                        {activity.type === 'TOP_PERFORMER' && activity.details.points && (
                          <div class="performance-details">
                            <div class="performance-stat">
                              <span class="stat-label">Puntos obtenidos:</span>
                              <span class="stat-value">{activity.details.points}</span>
                            </div>
                          </div>
                        )}
                        
                        {activity.type === 'BUDGET_WARNING' && activity.details.budget && (
                          <div class="budget-details">
                            <div class="budget-warning">
                              <span class="warning-text">Presupuesto restante:</span>
                              <span class="budget-amount">{activity.details.budget.toLocaleString()}€</span>
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {(activity.type === 'PLAYER_TRANSFER' || activity.type === 'TOP_PERFORMER') && (
                    <div class="activity-actions">
                      <button class="action-btn">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                          <circle cx="12" cy="12" r="3"></circle>
                        </svg>
                        Ver detalles
                      </button>
                    </div>
                  )}
                </div>
              </div>
            ))
          )}
        </div>
        
        {activityData.activities.length > 0 && (
          <div class="load-more">
            <button class="load-more-btn">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
              Cargar más actividad
            </button>
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Hidden data for JavaScript -->
  <script define:vars={{activityData, league_id}}>
    window.activityData = activityData;
    window.leagueId = league_id;
  </script>
</DefaultLayout>

<style>
  /* League Sub-Navigation - Same as other pages */
  .league-subnav {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    margin-bottom: 2rem;
  }

  .subnav-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .league-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .league-name {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0;
  }

  .league-status {
    padding: 0.25rem 0.75rem;
    border-radius: 16px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .league-status.active {
    background: #dcfce7;
    color: #166534;
  }

  .subnav-menu {
    display: flex;
    gap: 0.5rem;
  }

  .subnav-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: #64748b;
    border-radius: 8px;
    transition: all 0.2s ease;
    font-weight: 500;
    font-size: 0.875rem;
  }

  .subnav-link:hover {
    background: #f8fafc;
    color: #475569;
  }

  .subnav-link.active {
    background: #eff6ff;
    color: #1d4ed8;
    border: 1px solid #bfdbfe;
  }

  .subnav-icon {
    width: 18px;
    height: 18px;
  }

  /* Activity Container */
  .activity-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Activity Header */
  .activity-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
  }

  .header-info {
    flex: 1;
  }

  .page-title {
    font-size: 2rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0 0 0.5rem 0;
  }

  .page-subtitle {
    color: #64748b;
    margin: 0;
    font-size: 1rem;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .refresh-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    color: #64748b;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.875rem;
  }

  .refresh-btn:hover {
    background: #f1f5f9;
    color: #475569;
  }

  .refresh-btn svg {
    width: 16px;
    height: 16px;
  }

  .notifications-toggle {
    display: flex;
    align-items: center;
  }

  .notifications-toggle input {
    display: none;
  }

  .notifications-toggle label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    color: #64748b;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.875rem;
  }

  .notifications-toggle input:checked + label {
    background: #eff6ff;
    border-color: #3b82f6;
    color: #1d4ed8;
  }

  .notifications-toggle label svg {
    width: 16px;
    height: 16px;
  }

  /* Activity Content */
  .activity-content {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: 2rem;
  }

  /* Activity Sidebar */
  .activity-sidebar {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .filters-section {
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .filters-title {
    font-size: 1rem;
    font-weight: 600;
    color: #1a202c;
    margin: 0 0 1rem 0;
  }

  .filters-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-btn {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: transparent;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
  }

  .filter-btn:hover {
    background: #f8fafc;
  }

  .filter-btn.active {
    background: #eff6ff;
    color: #1d4ed8;
  }

  .filter-label {
    font-weight: 500;
    color: inherit;
  }

  .filter-count {
    background: #e2e8f0;
    color: #64748b;
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .filter-btn.active .filter-count {
    background: #3b82f6;
    color: white;
  }

  /* Quick Stats */
  .quick-stats {
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .stats-title {
    font-size: 1rem;
    font-weight: 600;
    color: #1a202c;
    margin: 0 0 1rem 0;
  }

  .stats-grid {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .stat-icon {
    font-size: 1.5rem;
  }

  .stat-info {
    display: flex;
    flex-direction: column;
  }

  .stat-value {
    font-weight: 700;
    color: #1a202c;
    font-size: 1.125rem;
  }

  .stat-label {
    font-size: 0.75rem;
    color: #64748b;
  }

  /* Activity Feed */
  .activity-feed {
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .feed-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #f1f5f9;
  }

  .feed-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1a202c;
    margin: 0;
  }

  .feed-controls {
    display: flex;
    gap: 0.5rem;
  }

  .sort-btn {
    padding: 0.375rem 0.75rem;
    background: transparent;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    color: #64748b;
    font-size: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .sort-btn:hover {
    border-color: #cbd5e0;
  }

  .sort-btn.active {
    background: #3b82f6;
    color: white;
    border-color: #3b82f6;
  }

  /* Activity Timeline */
  .activity-timeline {
    padding: 1.5rem;
  }

  .activity-item {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .activity-item:last-child {
    margin-bottom: 0;
  }

  .activity-timeline-marker {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }

  .timeline-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #cbd5e0;
    flex-shrink: 0;
  }

  .activity-item.high .timeline-dot {
    background: #dc2626;
  }

  .activity-item.medium .timeline-dot {
    background: #f59e0b;
  }

  .activity-item.low .timeline-dot {
    background: #10b981;
  }

  .timeline-line {
    width: 2px;
    height: 100%;
    background: #f1f5f9;
    margin-top: 0.5rem;
    position: absolute;
    top: 12px;
  }

  /* Activity Card */
  .activity-card {
    flex: 1;
    background: #f8fafc;
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid #f1f5f9;
  }

  .activity-header {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .activity-icon {
    font-size: 1.25rem;
    flex-shrink: 0;
  }

  .activity-meta {
    flex: 1;
  }

  .activity-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #1a202c;
    margin: 0 0 0.25rem 0;
  }

  .activity-time {
    font-size: 0.75rem;
    color: #64748b;
  }

  .priority-badge {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .priority-badge.high {
    background: #fee2e2;
    color: #dc2626;
  }

  .priority-badge.high svg {
    width: 12px;
    height: 12px;
  }

  .priority-badge.medium,
  .priority-badge.low {
    display: none;
  }

  /* Activity Content */
  .activity-content {
    margin-bottom: 0.75rem;
  }

  .activity-description {
    font-size: 0.875rem;
    color: #374151;
    margin: 0 0 0.75rem 0;
    line-height: 1.4;
  }

  .activity-details {
    background: white;
    border-radius: 6px;
    padding: 0.75rem;
    border: 1px solid #e2e8f0;
  }

  /* Transfer Details */
  .transfer-details {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .player-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .player-position {
    background: #3b82f6;
    color: white;
    padding: 0.125rem 0.375rem;
    border-radius: 4px;
    font-size: 0.625rem;
    font-weight: 600;
  }

  .player-name {
    font-weight: 600;
    color: #1a202c;
    font-size: 0.875rem;
  }

  .player-team {
    color: #64748b;
    font-size: 0.75rem;
  }

  .transfer-amount {
    font-weight: 700;
    color: #059669;
    font-size: 0.875rem;
  }

  .transfer-amount.sell {
    color: #f59e0b;
  }

  /* Performance Details */
  .performance-details {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .performance-stat {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .performance-stat .stat-label {
    color: #64748b;
    font-size: 0.75rem;
  }

  .performance-stat .stat-value {
    font-weight: 700;
    color: #3b82f6;
    font-size: 0.875rem;
  }

  /* Budget Details */
  .budget-details {
    display: flex;
    align-items: center;
  }

  .budget-warning {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .warning-text {
    color: #dc2626;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .budget-amount {
    font-weight: 700;
    color: #dc2626;
    font-size: 0.875rem;
  }

  /* Activity Actions */
  .activity-actions {
    display: flex;
    justify-content: flex-end;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .action-btn:hover {
    background: #1d4ed8;
  }

  .action-btn svg {
    width: 12px;
    height: 12px;
  }

  /* No Activities State */
  .no-activities {
    padding: 4rem 2rem;
    text-align: center;
  }

  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .empty-state svg {
    width: 48px;
    height: 48px;
    color: #9ca3af;
  }

  .empty-state p {
    font-weight: 500;
    color: #374151;
    margin: 0;
    font-size: 1.125rem;
  }

  .empty-state small {
    color: #6b7280;
    font-size: 0.875rem;
  }

  /* Load More */
  .load-more {
    padding: 1.5rem;
    border-top: 1px solid #f1f5f9;
    display: flex;
    justify-content: center;
  }

  .load-more-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    color: #64748b;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
  }

  .load-more-btn:hover {
    background: #f1f5f9;
    color: #475569;
  }

  .load-more-btn svg {
    width: 16px;
    height: 16px;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .subnav-container {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .subnav-menu {
      overflow-x: auto;
      width: 100%;
      padding-bottom: 0.5rem;
    }

    .activity-container {
      padding: 0 1rem;
    }

    .activity-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .activity-content {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .activity-sidebar {
      order: 2;
      flex-direction: row;
      gap: 1rem;
      overflow-x: auto;
    }

    .filters-section,
    .quick-stats {
      min-width: 250px;
    }

    .activity-feed {
      order: 1;
    }
  }

  @media (max-width: 768px) {
    .subnav-link span {
      display: none;
    }

    .subnav-link {
      padding: 0.75rem;
    }

    .header-actions {
      flex-direction: column;
      gap: 0.5rem;
      align-items: stretch;
    }

    .feed-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .activity-item {
      gap: 0.75rem;
    }

    .timeline-dot {
      width: 10px;
      height: 10px;
    }

    .activity-card {
      padding: 0.75rem;
    }

    .transfer-details {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }

    .activity-sidebar {
      flex-direction: column;
    }

    .filters-section,
    .quick-stats {
      min-width: auto;
    }
  }
</style>

<script>
  // Activity page functionality
  let currentFilter = 'all';
  let currentSort = 'newest';

  // DOM elements
  const filterButtons = document.querySelectorAll('.filter-btn');
  const sortButtons = document.querySelectorAll('.sort-btn');
  const activityItems = document.querySelectorAll('.activity-item');
  const refreshButton = document.getElementById('refresh-activity');
  const loadMoreButton = document.querySelector('.load-more-btn');
  const notificationsToggle = document.getElementById('notifications');

  // Activity type mappings for filtering
  const activityTypeMap = {
    'all': [],
    'transfers': ['PLAYER_TRANSFER', 'PLAYER_SOLD'],
    'matches': ['MATCH_WEEK_ENDED', 'MATCH_STARTED', 'TOP_PERFORMER'],
    'market': ['MARKET_ROUND_STARTED', 'POWER_UP_USED', 'BUDGET_WARNING'],
    'users': ['USER_JOINED', 'WEEKLY_SUMMARY', 'LEAGUE_MILESTONE']
  };

  // Filter functionality
  function filterActivities(filterType) {
    const typesToShow = activityTypeMap[filterType] || [];
    
    activityItems.forEach(item => {
      const itemType = item.getAttribute('data-type');
      
      if (filterType === 'all' || typesToShow.includes(itemType)) {
        item.style.display = 'flex';
      } else {
        item.style.display = 'none';
      }
    });

    // Update filter button states
    filterButtons.forEach(btn => {
      btn.classList.toggle('active', btn.getAttribute('data-filter') === filterType);
    });

    currentFilter = filterType;
  }

  // Sort functionality
  function sortActivities(sortType) {
    const timeline = document.querySelector('.activity-timeline');
    const items = Array.from(activityItems);
    
    items.sort((a, b) => {
      const timeA = a.querySelector('.activity-time').textContent;
      const timeB = b.querySelector('.activity-time').textContent;
      
      if (sortType === 'newest') {
        return timeB.localeCompare(timeA);
      } else {
        return timeA.localeCompare(timeB);
      }
    });

    // Clear timeline and re-append sorted items
    timeline.innerHTML = '';
    items.forEach(item => timeline.appendChild(item));

    // Update sort button states
    sortButtons.forEach(btn => {
      btn.classList.toggle('active', btn.getAttribute('data-sort') === sortType);
    });

    currentSort = sortType;
  }

  // Refresh activity feed
  function refreshActivity() {
    // Add loading state
    refreshButton.style.opacity = '0.6';
    refreshButton.style.pointerEvents = 'none';
    
    // Reload the page to get fresh data
    setTimeout(() => {
      window.location.reload();
    }, 500);
  }

  // Load more activities
  function loadMoreActivities() {
    // Add loading state
    loadMoreButton.style.opacity = '0.6';
    loadMoreButton.disabled = true;
    
    // In a real implementation, you would fetch more activities from the API
    setTimeout(() => {
      loadMoreButton.style.opacity = '1';
      loadMoreButton.disabled = false;
      
      console.log('More activities would be loaded here');
    }, 1500);
  }

  // Toggle notifications
  function toggleNotifications() {
    const isEnabled = notificationsToggle.checked;
    console.log('Notifications:', isEnabled ? 'enabled' : 'disabled');
    
    // In a real app, you would save this preference to the database
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Filter button clicks
    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const filterType = btn.getAttribute('data-filter');
        filterActivities(filterType);
      });
    });

    // Sort button clicks
    sortButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const sortType = btn.getAttribute('data-sort');
        sortActivities(sortType);
      });
    });

    // Action button clicks
    document.querySelectorAll('.action-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        console.log('View details clicked');
      });
    });

    // Refresh button
    refreshButton?.addEventListener('click', refreshActivity);

    // Load more button
    loadMoreButton?.addEventListener('click', loadMoreActivities);

    // Notifications toggle
    notificationsToggle?.addEventListener('change', toggleNotifications);
  });
</script>