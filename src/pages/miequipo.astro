---
// src/pages/leagues/[id]/team.astro
import DefaultLayout from '../layouts/DefaultLayout.astro';
import { supabase } from '../lib/supabase';

const { id } = Astro.params;

// Datos temporales - luego los conectaremos a Supabase
const user_id = 'e01005c8-1f15-4ca7-a1e9-7d423b84cc77';
const league_id = '586b1a73-3247-48ff-a8fa-48d17139fdfa';

// Obtener el equipo del usuario
const { data: userTeamRaw, error } = await supabase
  .from('user_teams')
  .select('player_id, is_starter, lec_players(id, name, position, team, market_value)')
  .eq('user_id', user_id)
  .eq('league_id', league_id);

if (error) {
  console.error('Error al cargar el equipo:', error.message);
  throw new Error(error.message);
}

// Mapear a estructura de teamData
const starters = [];
const bench = [];
let totalValue = 0;

for (const entry of userTeamRaw) {
  const player = entry.lec_players;

  if (!player) continue;

  const playerData = {
    id: player.id,
    name: player.name,
    position: player.position,
    team: player.team,
    value: player.market_value,
    powerUp: null
  };

  totalValue += player.value;

  if (entry.is_starter) {
    starters.push(playerData);
  } else {
    bench.push(playerData);
  }
}

const teamData = {
  totalPlayers: starters.length + bench.length,
  totalValue,
  budget: 100000 - totalValue, // Ajusta esta lógica según reglas
  starters,
  bench
};
---

<DefaultLayout title="Mi Equipo">
  <div class="team-container">
    <!-- League Sub-Navigation -->
    <div class="league-subnav">
      <div class="subnav-container">
        <div class="league-info">
          <h1 class="league-name">Liga de ejemplo</h1>
          <span class="league-status active">Activa</span>
        </div>
        
        <nav class="subnav-menu">
          <a href={`/leagues/${id}/team`} class="subnav-link active">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
            Mi Equipo
          </a>
          <a href={`/leagues/${id}/market`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="9" cy="21" r="1"></circle>
              <circle cx="20" cy="21" r="1"></circle>
              <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
            </svg>
            Mercado
          </a>
          <a href={`/leagues/${id}/standings`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M8 6l4-4 4 4"></path>
              <path d="M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22"></path>
              <path d="M20 22l-6.828-6.828A4 4 0 0 1 12 12.3V2"></path>
            </svg>
            Clasificación
          </a>
          <a href={`/leagues/${id}/matches`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            Partidos
          </a>
          <a href={`/leagues/${id}/activity`} class="subnav-link">
            <svg class="subnav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"></path>
              <path d="M12 6v6l4 2"></path>
            </svg>
            Actividad
          </a>
        </nav>
      </div>
    </div>
    <!-- Header Section -->
    <div class="team-header">
      <h1 class="page-title">Mi Equipo</h1>
      <div class="team-summary">
        <div class="summary-card">
          <div class="summary-icon players">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
          </div>
          <div class="summary-info">
            <span class="summary-value">{teamData.totalPlayers}</span>
            <span class="summary-label">Jugadores</span>
          </div>
        </div>
        
        <div class="summary-card">
          <div class="summary-icon value">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="12" y1="1" x2="12" y2="23"></line>
              <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
            </svg>
          </div>
          <div class="summary-info">
            <span class="summary-value">{teamData.totalValue.toLocaleString()}€</span>
            <span class="summary-label">Valor total</span>
          </div>
        </div>
        
        <div class="summary-card">
          <div class="summary-icon budget">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="1" y="3" width="15" height="13"></rect>
              <path d="M16 8h4a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-4"></path>
              <circle cx="9" cy="9" r="2"></circle>
              <path d="M8 12h2a2 2 0 0 1 2 2v2H6v-2a2 2 0 0 1 2-2z"></path>
            </svg>
          </div>
          <div class="summary-info">
            <span class="summary-value">{teamData.budget.toLocaleString()}€</span>
            <span class="summary-label">Presupuesto</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Power-up Modal -->
    <div id="powerup-modal" class="modal hidden">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Seleccionar Power-up</h3>
          <button class="modal-close" id="close-powerup">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <div class="modal-body">
          <p>Elige un power-up para <strong id="powerup-player-name"></strong>:</p>
          <div class="powerup-options" id="powerup-options">
            <!-- Power-ups will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>

    <!-- Swap Players Modal -->
    <div id="swap-modal" class="modal hidden">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Intercambiar Jugador</h3>
          <button class="modal-close" id="close-swap">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <div class="modal-body">
          <div class="swap-header">
            <div class="current-starter">
              <h4>Jugador titular</h4>
              <div class="player-info-modal" id="starter-info">
                <!-- Current starter info will be populated -->
              </div>
            </div>
            <div class="swap-arrow">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M7 16l4-4-4-4M17 20l4-4-4-4"></path>
              </svg>
            </div>
          </div>
          
          <div class="bench-options" id="bench-options">
            <!-- Available bench players will be populated -->
          </div>
          
          <div class="no-bench-message hidden" id="no-bench-message">
            <div class="empty-state">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"></circle>
                <path d="M12 6v6l4 2"></path>
              </svg>
              <p>No tienes jugadores suplentes en la posición <strong id="position-name"></strong></p>
              <small>Puedes fichar jugadores en el mercado para tener más opciones</small>
            </div>
          </div>

          <div class="swap-actions">
            <button class="btn btn-secondary" id="cancel-swap">Cancelar</button>
            <button class="btn btn-primary" id="confirm-swap" disabled>Intercambiar</button>
          </div>
        </div>
      </div>
    </div>

    <div class="team-content">
      <!-- Left Panel - Squad List -->
      <div class="squad-panel">
        <div class="panel-header">
          <h2 class="panel-title">Mi Plantilla</h2>
          <button class="manage-btn">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
            </svg>
            Gestionar
          </button>
        </div>
        
        <!-- Starters -->
        <div class="players-section">
          <h3 class="section-title">Roster titular</h3>
          <div class="players-list">
            {teamData.starters.map(player => (
              <div class="player-card starter" data-player-id={player.id} data-position={player.position}>
                <div class="player-info">
                  <div class="player-avatar">
                    <span class="position-badge">{player.position}</span>
                  </div>
                  <div class="player-details">
                    <span class="player-name">{player.name}</span>
                    <span class="player-team">{player.team}</span>
                  </div>
                </div>
                <div class="player-meta">
                  <span class="player-value">{player.value.toLocaleString()}€</span>
                  {player.powerUp && (
                    <span class="power-up-badge">{player.powerUp}</span>
                  )}
                </div>
                <div class="swap-indicator">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M7 16l4-4-4-4M17 20l4-4-4-4"></path>
                  </svg>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <!-- Bench -->
        <div class="players-section">
          <h3 class="section-title">Suplentes</h3>
          <div class="players-list">
            {teamData.bench.map(player => (
              <div class="player-card bench" data-player-id={player.id} data-position={player.position}>
                <div class="player-info">
                  <div class="player-avatar">
                    <span class="position-badge">{player.position}</span>
                  </div>
                  <div class="player-details">
                    <span class="player-name">{player.name}</span>
                    <span class="player-team">{player.team}</span>
                  </div>
                </div>
                <div class="player-meta">
                  <span class="player-value">{player.value.toLocaleString()}€</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Right Panel - Rift Formation -->
      <div class="formation-panel">
        <div class="panel-header">
          <h2 class="panel-title">Roster</h2>
          <div class="formation-info">
            <span class="formation-label">Grieta del Invocador</span>
          </div>
        </div>
        
        <div class="rift-container">
          <div class="rift-background">
            <div class="rift-placeholder">
              <svg viewBox="0 0 400 300" fill="none">
                <rect width="400" height="300" fill="#1a472a" rx="8"/>
                <path d="M50 150 L350 150" stroke="#2d5a3d" stroke-width="2" stroke-dasharray="10,5"/>
                <circle cx="200" cy="150" r="40" fill="none" stroke="#2d5a3d" stroke-width="2"/>
                <text x="200" y="30" text-anchor="middle" fill="#4ade80" font-size="12">ENEMIGO</text>
                <text x="200" y="285" text-anchor="middle" fill="#3b82f6" font-size="12">ALIADO</text>
              </svg>
            </div>
          </div>
          
          <!-- Player Positions -->
          <div class="player-positions">
            {teamData.starters.map(player => (
              <div 
                class={`position-slot ${player.position.toLowerCase()}`}
                data-position={player.position}
                data-player-id={player.id}
              >
                <div class="position-player" data-player-id={player.id} data-position={player.position}>
                  <div class="player-portrait">
                    <span class="portrait-name">{player.name}</span>
                    <span class="portrait-team">{player.team}</span>
                  </div>
                  {player.powerUp && (
                    <div class="position-powerup">{player.powerUp}</div>
                  )}
                  <button class="powerup-btn" data-player-id={player.id}>
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                    </svg>
                  </button>
                  <div class="swap-icon">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M7 16l4-4-4-4M17 20l4-4-4-4"></path>
                    </svg>
                  </div>
                </div>
                
                <!-- Dropdown de suplentes -->
                <div class="substitutes-dropdown hidden" data-position={player.position}>
                  <div class="dropdown-header">
                    <span class="dropdown-title">Suplentes - {player.position}</span>
                    <button class="dropdown-close">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                      </svg>
                    </button>
                  </div>
                  <div class="dropdown-content">
                    <!-- Los suplentes se cargarán dinámicamente con JavaScript -->
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Hidden data for JavaScript -->
  <script define:vars={{teamData}}>
    window.teamData = teamData;
    console.log("Team data asignada a window:", window.teamData);
  </script>
</DefaultLayout>

<style>
  /* League Sub-Navigation */
  .league-subnav {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    margin-bottom: 2rem;
  }

  .subnav-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .league-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .league-name {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0;
  }

  .league-status {
    padding: 0.25rem 0.75rem;
    border-radius: 16px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .league-status.active {
    background: #dcfce7;
    color: #166534;
  }

  .league-status.draft {
    background: #fef3c7;
    color: #92400e;
  }

  .subnav-menu {
    display: flex;
    gap: 0.5rem;
  }

  .subnav-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: #64748b;
    border-radius: 8px;
    transition: all 0.2s ease;
    font-weight: 500;
    font-size: 0.875rem;
  }

  .subnav-link:hover {
    background: #f8fafc;
    color: #475569;
  }

  .subnav-link.active {
    background: #eff6ff;
    color: #1d4ed8;
    border: 1px solid #bfdbfe;
  }

  .subnav-icon {
    width: 18px;
    height: 18px;
  }

  .team-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Header */
  .team-header {
    margin-bottom: 2rem;
  }

  .page-title {
    font-size: 2rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0 0 1.5rem 0;
  }

  .team-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .summary-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid #e2e8f0;
    display: flex;
    align-items: center;
    gap: 1rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .summary-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .summary-icon.players {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  }

  .summary-icon.value {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  }

  .summary-icon.budget {
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  }

  .summary-icon svg {
    width: 24px;
    height: 24px;
  }

  .summary-info {
    display: flex;
    flex-direction: column;
  }

  .summary-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1a202c;
  }

  .summary-label {
    font-size: 0.875rem;
    color: #64748b;
  }

  /* Main Content */
  .team-content {
    display: grid;
    grid-template-columns: 400px 1fr;
    gap: 2rem;
  }

  /* Squad Panel */
  .squad-panel {
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    height: fit-content;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .panel-header {
    padding: 1.5rem;
    border-bottom: 1px solid #f1f5f9;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .panel-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1a202c;
    margin: 0;
  }

  .manage-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    color: #64748b;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .manage-btn:hover {
    background: #f1f5f9;
    color: #475569;
  }

  .manage-btn svg {
    width: 16px;
    height: 16px;
  }

  .players-section {
    padding: 0 1.5rem 1.5rem;
  }

  .section-title {
    font-size: 1rem;
    font-weight: 600;
    color: #374151;
    margin: 0 0 1rem 0;
    padding-top: 1rem;
  }

  .players-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .player-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    border-radius: 8px;
    transition: all 0.2s ease;
    cursor: pointer;
    position: relative;
  }

  .player-card:hover {
    background: #f8fafc;
    transform: translateY(-1px);
  }

  .player-card.starter {
    border-left: 3px solid #10b981;
  }

  .player-card.starter:hover {
    background: #f0fdf4;
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.1);
  }

  .player-card.bench {
    border-left: 3px solid #6b7280;
  }

  .player-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex: 1;
  }

  .player-avatar {
    width: 40px;
    height: 40px;
    background: #f1f5f9;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .position-badge {
    font-size: 0.75rem;
    font-weight: 600;
    color: #475569;
  }

  .player-details {
    display: flex;
    flex-direction: column;
  }

  .player-name {
    font-weight: 600;
    color: #1a202c;
    font-size: 0.875rem;
  }

  .player-team {
    font-size: 0.75rem;
    color: #64748b;
  }

  .player-meta {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.25rem;
  }

  .player-value {
    font-weight: 600;
    color: #059669;
    font-size: 0.875rem;
  }

  .power-up-badge {
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    color: white;
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    font-size: 0.625rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .swap-indicator {
    opacity: 0;
    transition: opacity 0.2s ease;
    margin-left: 0.5rem;
    color: #3b82f6;
  }

  .player-card.starter:hover .swap-indicator {
    opacity: 1;
  }

  .swap-indicator svg {
    width: 16px;
    height: 16px;
  }

  /* Formation Panel */
  .formation-panel {
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    height: fit-content;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .formation-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .formation-label {
    font-size: 0.875rem;
    color: #64748b;
  }

  .rift-container {
    padding: 1.5rem;
    position: relative;
  }

  .rift-background {
    width: 100%;
    aspect-ratio: 4/3;
    border-radius: 8px;
    overflow: hidden;
    position: relative;
    background-image: url('/grieta.webp');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }

  .rift-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.4);
    z-index: 1;
  }

  .rift-placeholder {
    display: none;
  }

  /* Player Positions */
  .player-positions {
    position: absolute;
    top: 1.5rem;
    left: 1.5rem;
    right: 1.5rem;
    bottom: 1.5rem;
    pointer-events: none;
    z-index: 2;
  }

  .position-slot {
    position: absolute;
    pointer-events: auto;
  }

  .position-slot.top {
    top: 50%;
    left: 10%;
    transform: translateY(-50%);
  }

  .position-slot.jungle {
    top: 50%;
    left: 27.5%;
    transform: translateY(-50%);
  }

  .position-slot.mid {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .position-slot.adc {
    top: 50%;
    right: 27.5%;
    transform: translateY(-50%);
  }

  .position-slot.support {
    top: 50%;
    right: 10%;
    transform: translateY(-50%);
  }

  .position-player {
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 0.75rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    min-width: 120px;
    min-height: 100px;
    text-align: center;
    position: relative;
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    cursor: pointer;
  }

  .position-player:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border-color: #3b82f6;
  }

  .position-player.active {
    border-color: #3b82f6;
    background: #f0f9ff;
  }

  .player-portrait {
    margin-bottom: 0.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .portrait-name {
    display: block;
    font-weight: 600;
    color: #1a202c;
    font-size: 0.875rem;
  }

  .portrait-team {
    display: block;
    font-size: 0.75rem;
    color: #64748b;
  }

  .position-powerup {
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    color: white;
    padding: 0.125rem 0.5rem;
    border-radius: 8px;
    font-size: 0.625rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.5rem;
    display: inline-block;
    min-height: 20px;
    line-height: 1.5;
  }

  /* Placeholder for players without power-up to maintain consistent height */
  .position-player:not(:has(.position-powerup)) .player-portrait {
    margin-bottom: calc(0.5rem + 20px + 0.5rem); /* Same space as power-up + margins */
  }

  .powerup-btn {
    position: absolute;
    top: -8px;
    right: -8px;
    width: 24px;
    height: 24px;
    background: #3b82f6;
    border: 2px solid white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    z-index: 3;
  }

  .powerup-btn:hover {
    background: #1d4ed8;
    transform: scale(1.1);
  }

  .powerup-btn svg {
    width: 12px;
    height: 12px;
    color: white;
  }

  .swap-icon {
    position: absolute;
    bottom: -8px;
    right: -8px;
    width: 24px;
    height: 24px;
    background: #10b981;
    border: 2px solid white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: all 0.2s ease;
    z-index: 3;
  }

  .position-player:hover .swap-icon {
    opacity: 1;
  }

  .position-player.active .swap-icon {
    opacity: 1;
    background: #059669;
  }

  .swap-icon svg {
    width: 12px;
    height: 12px;
    color: white;
  }

  /* Substitutes Dropdown */
  .substitutes-dropdown {
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-top: 0.5rem;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    min-width: 200px;
    max-width: 250px;
    z-index: 1000;
    overflow: hidden;
  }

  .dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background: #f8fafc;
    border-bottom: 1px solid #e2e8f0;
  }

  .dropdown-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
  }

  .dropdown-close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    color: #64748b;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .dropdown-close:hover {
    background: #e2e8f0;
    color: #374151;
  }

  .dropdown-close svg {
    width: 16px;
    height: 16px;
  }

  .dropdown-content {
    max-height: 200px;
    overflow-y: auto;
  }

  .substitute-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-bottom: 1px solid #f1f5f9;
  }

  .substitute-item:last-child {
    border-bottom: none;
  }

  .substitute-item:hover {
    background: #f0f9ff;
  }

  .substitute-item.selected {
    background: #eff6ff;
    border-left: 3px solid #3b82f6;
  }

  .substitute-item .player-avatar {
    width: 32px;
    height: 32px;
    flex-shrink: 0;
  }

  .substitute-item .position-badge {
    font-size: 0.625rem;
  }

  .substitute-item .player-details {
    flex: 1;
    text-align: left;
  }

  .substitute-item .player-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: #1a202c;
    display: block;
  }

  .substitute-item .player-team {
    font-size: 0.75rem;
    color: #64748b;
    display: block;
  }

  .substitute-item .player-value {
    font-size: 0.75rem;
    font-weight: 600;
    color: #059669;
  }

  .no-substitutes {
    padding: 1.5rem 1rem;
    text-align: center;
    color: #64748b;
  }

  .no-substitutes p {
    font-size: 0.875rem;
    margin: 0;
    font-weight: 500;
    color: #374151;
  }

  /* Position-specific dropdown positioning */
  .position-slot.top .substitutes-dropdown {
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
  }

  .position-slot.jungle .substitutes-dropdown {
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
  }

  .position-slot.mid .substitutes-dropdown {
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
  }

  .position-slot.adc .substitutes-dropdown {
    top: 100%;
    right: 0;
    left: auto;
    transform: none;
  }

  .position-slot.support .substitutes-dropdown {
    top: 100%;
    right: 0;
    left: auto;
    transform: none;
  }

  /* Modal */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal-content {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .modal-header h3 {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0;
  }

  .modal-close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    color: #64748b;
  }

  .modal-close svg {
    width: 20px;
    height: 20px;
  }

  .modal-body p {
    margin-bottom: 1rem;
    color: #374151;
  }

  /* Swap Modal Specific Styles */
  .swap-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 8px;
  }

  .current-starter {
    flex: 1;
  }

  .current-starter h4 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #64748b;
    margin: 0 0 0.5rem 0;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .player-info-modal {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .player-info-modal .player-avatar {
    width: 36px;
    height: 36px;
  }

  .player-info-modal .position-badge {
    font-size: 0.625rem;
  }

  .swap-arrow {
    color: #3b82f6;
    padding: 0.5rem;
  }

  .swap-arrow svg {
    width: 20px;
    height: 20px;
  }

  .bench-options {
    margin-bottom: 1.5rem;
  }

  .bench-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-bottom: 0.5rem;
  }

  .bench-option:hover {
    border-color: #3b82f6;
    background: #f0f9ff;
  }

  .bench-option.selected {
    border-color: #3b82f6;
    background: #eff6ff;
  }

  .bench-option:last-child {
    margin-bottom: 0;
  }

  .no-bench-message {
    text-align: center;
    padding: 2rem 1rem;
  }

  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .empty-state svg {
    width: 48px;
    height: 48px;
    color: #9ca3af;
  }

  .empty-state p {
    font-weight: 500;
    color: #374151;
    margin: 0;
  }

  .empty-state small {
    color: #6b7280;
    font-size: 0.875rem;
  }

  .swap-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid #f1f5f9;
  }

  .powerup-options {
    display: grid;
    gap: 0.75rem;
  }

  .powerup-option {
    padding: 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
  }

  .powerup-option:hover {
    border-color: #3b82f6;
    background: #f0f9ff;
  }

  .powerup-option.selected {
    border-color: #3b82f6;
    background: #eff6ff;
  }

  .powerup-name {
    font-weight: 600;
    color: #1a202c;
    display: block;
    margin-bottom: 0.25rem;
  }

  .powerup-description {
    font-size: 0.875rem;
    color: #64748b;
  }

  .powerup-actions {
    margin-top: 1.5rem;
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
  }

  .btn {
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    font-size: 0.875rem;
  }

  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .btn-primary {
    background: #3b82f6;
    color: white;
  }

  .btn-primary:hover:not(:disabled) {
    background: #1d4ed8;
  }

  .btn-secondary {
    background: #f1f5f9;
    color: #64748b;
  }

  .btn-secondary:hover {
    background: #e2e8f0;
  }

  .hidden {
    display: none !important;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .subnav-container {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .subnav-menu {
      overflow-x: auto;
      width: 100%;
      padding-bottom: 0.5rem;
    }

    .team-container {
      padding: 0 1rem;
    }

    .team-content {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .squad-panel {
      order: 2;
    }

    .formation-panel {
      order: 1;
    }
  }

  @media (max-width: 768px) {
    .subnav-link span {
      display: none;
    }

    .subnav-link {
      padding: 0.75rem;
    }

    .team-summary {
      grid-template-columns: 1fr;
    }

    .position-player {
      min-width: 100px;
      padding: 0.5rem;
    }

    .portrait-name {
      font-size: 0.75rem;
    }

    .portrait-team {
      font-size: 0.625rem;
    }

    .player-card.selected {
      outline: 3px solid #3b82f6;
      outline-offset: 2px;
    }

    .modal-content {
      margin: 1rem;
      max-width: none;
    }

    .swap-header {
      flex-direction: column;
      text-align: center;
    }

    .swap-arrow {
      transform: rotate(90deg);
    }

    /* Mobile dropdown adjustments */
    .substitutes-dropdown {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      min-width: 280px;
      max-width: 90vw;
      max-height: 60vh;
      z-index: 1001;
    }

    .position-slot.top .substitutes-dropdown,
    .position-slot.jungle .substitutes-dropdown,
    .position-slot.mid .substitutes-dropdown,
    .position-slot.adc .substitutes-dropdown,
    .position-slot.support .substitutes-dropdown {
      position: fixed;
      top: 50%;
      left: 50%;
      right: auto;
      transform: translate(-50%, -50%);
    }

    .dropdown-content {
      max-height: 40vh;
    }
  }
</style>

<script>
  let selectedStarterId = null;
  let selectedBenchId = null;
  let teamData = null;

  document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM cargado, iniciando script...");
    
    const leagueId = "586b1a73-3247-48ff-a8fa-48d17139fdfa";
    const userId = "e01005c8-1f15-4ca7-a1e9-7d423b84cc77";
    
    // Get team data from window object (set by Astro)
    if (window.teamData) {
      teamData = window.teamData;
      console.log("Team data cargada desde window:", teamData);
    } else {
      console.error("No se encontró window.teamData!");
      // Backup: extraer datos del DOM
      teamData = extractTeamDataFromDOM();
      console.log("Team data extraída del DOM como backup:", teamData);
    }

    // Test: verificar que los elementos existen
    const positionPlayers = document.querySelectorAll(".position-player");
    const dropdowns = document.querySelectorAll(".substitutes-dropdown");
    console.log("Position players encontrados:", positionPlayers.length);
    console.log("Dropdowns encontrados:", dropdowns.length);

    // Modal elements
    const swapModal = document.getElementById('swap-modal');
    const closeSwapBtn = document.getElementById('close-swap');
    const cancelSwapBtn = document.getElementById('cancel-swap');
    const confirmSwapBtn = document.getElementById('confirm-swap');
    const starterInfo = document.getElementById('starter-info');
    const benchOptions = document.getElementById('bench-options');
    const noBenchMessage = document.getElementById('no-bench-message');
    const positionName = document.getElementById('position-name');

    // Power-up modal elements (existing)
    const powerupModal = document.getElementById('powerup-modal');
    const closePowerupBtn = document.getElementById('close-powerup');

    // Close modals
    closeSwapBtn?.addEventListener('click', closeSwapModal);
    cancelSwapBtn?.addEventListener('click', closeSwapModal);
    closePowerupBtn?.addEventListener('click', closePowerupModal);

    // Close modal when clicking outside
    swapModal?.addEventListener('click', (e) => {
      if (e.target === swapModal) closeSwapModal();
    });

    powerupModal?.addEventListener('click', (e) => {
      if (e.target === powerupModal) closePowerupModal();
    });

    // Handle formation player clicks (new functionality)
    document.querySelectorAll(".position-player").forEach(player => {
      console.log("Encontrado position-player:", player);
      player.addEventListener("click", (e) => {
        console.log("Click en position-player detectado!");
        e.stopPropagation();
        
        // Prevent triggering when clicking power-up button
        if (e.target.closest('.powerup-btn')) {
          console.log("Click en powerup-btn, ignorando...");
          return;
        }
        
        const playerId = player.dataset.playerId;
        const position = player.dataset.position;
        const positionSlot = player.closest('.position-slot');
        const dropdown = positionSlot.querySelector('.substitutes-dropdown');
        
        console.log("Datos del click:", { playerId, position, positionSlot, dropdown });
        
        // Close all other dropdowns
        document.querySelectorAll('.substitutes-dropdown').forEach(dd => {
          if (dd !== dropdown) {
            dd.classList.add('hidden');
          }
        });
        
        document.querySelectorAll('.position-player').forEach(p => {
          if (p !== player) {
            p.classList.remove('active');
          }
        });
        
        // Toggle current dropdown
        if (dropdown.classList.contains('hidden')) {
          console.log("Mostrando dropdown...");
          showSubstitutesDropdown(dropdown, position, playerId);
          player.classList.add('active');
        } else {
          console.log("Ocultando dropdown...");
          dropdown.classList.add('hidden');
          player.classList.remove('active');
        }
      });
    });

    // Handle clicks outside dropdowns to close them
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.position-slot')) {
        document.querySelectorAll('.substitutes-dropdown').forEach(dropdown => {
          dropdown.classList.add('hidden');
        });
        document.querySelectorAll('.position-player').forEach(player => {
          player.classList.remove('active');
        });
      }
    });

    // Handle dropdown close buttons
    document.addEventListener('click', (e) => {
      if (e.target.closest('.dropdown-close')) {
        const dropdown = e.target.closest('.substitutes-dropdown');
        const player = dropdown.closest('.position-slot').querySelector('.position-player');
        dropdown.classList.add('hidden');
        player.classList.remove('active');
      }
    });

    function showSubstitutesDropdown(dropdown, position, currentStarterId) {
      console.log("showSubstitutesDropdown llamada con:", { dropdown, position, currentStarterId, teamData });
      
      if (!teamData) {
        console.log("No hay teamData!");
        return;
      }
      
      // Find substitutes for this position
      const substitutes = teamData.bench.filter(p => p.position === position);
      console.log("Suplentes encontrados:", substitutes);
      
      const dropdownContent = dropdown.querySelector('.dropdown-content');
      console.log("Dropdown content element:", dropdownContent);
      
      if (substitutes.length === 0) {
        console.log("No hay suplentes, mostrando mensaje...");
        // No substitutes available
        dropdownContent.innerHTML = `
          <div class="no-substitutes">
            <p>No hay jugadores suplentes para esta posición</p>
          </div>
        `;
      } else {
        console.log("Hay suplentes, mostrando lista...");
        // Show substitutes
        dropdownContent.innerHTML = substitutes.map(substitute => `
          <div class="substitute-item" data-player-id="${substitute.id}" data-starter-id="${currentStarterId}">
            <div class="player-avatar">
              <span class="position-badge">${substitute.position}</span>
            </div>
            <div class="player-details">
              <span class="player-name">${substitute.name}</span>
              <span class="player-team">${substitute.team}</span>
            </div>
            <div class="player-value">${substitute.value.toLocaleString()}€</div>
          </div>
        `).join('');
        
        // Add click handlers to substitute items
        dropdownContent.querySelectorAll('.substitute-item').forEach(item => {
          item.addEventListener('click', async (e) => {
            e.stopPropagation();
            
            const substituteId = item.dataset.playerId;
            const starterId = item.dataset.starterId;
            
            console.log("Intentando intercambio:", {
              starterId,
              substituteId,
              leagueId,
              userId
            });
            
            // Visual feedback
            item.classList.add('selected');
            
            try {
              const requestBody = {
                starterId: starterId,
                benchId: substituteId,
                leagueId,
                userId
              };
              
              console.log("Enviando request:", requestBody);
              
              const res = await fetch("/api/swapStarter", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestBody)
              });

              console.log("Response status:", res.status);
              console.log("Response ok:", res.ok);
              
              if (res.ok) {
                const successData = await res.json();
                console.log("Intercambio exitoso:", successData);
                console.log("Response completa:", successData);
                
                // Verificar si realmente se actualizó
                if (successData.success === false) {
                  console.error("El intercambio falló en el backend:", successData);
                  alert("Error: " + (successData.message || "El intercambio falló"));
                  item.classList.remove('selected');
                  return;
                }
                
                // Disable further clicks
                item.style.pointerEvents = 'none';
                
                // Show success feedback
                item.style.background = '#dcfce7';
                item.innerHTML = `
                  <div class="player-avatar">
                    <span class="position-badge">✓</span>
                  </div>
                  <div class="player-details">
                    <span class="player-name">Intercambio exitoso</span>
                    <span class="player-team">Recargando...</span>
                  </div>
                `;
                
                // Close dropdown
                const dropdown = item.closest('.substitutes-dropdown');
                const player = dropdown.closest('.position-slot').querySelector('.position-player');
                
                // Wait a bit more before reload to ensure backend is updated
                setTimeout(() => {
                  console.log("Iniciando recarga...");
                  console.log("Datos antes de recarga:", {
                    currentUserId: userId,
                    currentLeagueId: leagueId,
                    starterId,
                    substituteId
                  });
                  window.location.reload();
                }, 1000);
              } else {
                const errorData = await res.json();
                console.error("Error del servidor:", errorData);
                alert("Error: " + (errorData.message || "Error desconocido"));
                item.classList.remove('selected');
              }
            } catch (err) {
              console.error("Error en la request:", err);
              alert("Error al hacer el intercambio: " + err.message);
              item.classList.remove('selected');
            }
          });
          
          // Add hover effect
          item.addEventListener('mouseenter', () => {
            item.style.background = '#f0f9ff';
          });
          
          item.addEventListener('mouseleave', () => {
            if (!item.classList.contains('selected')) {
              item.style.background = '';
            }
          });
        });
      }
      
      // Always show the dropdown, regardless of whether there are substitutes or not
      console.log("Mostrando dropdown, clases antes:", dropdown.classList.toString());
      dropdown.classList.remove('hidden');
      console.log("Mostrando dropdown, clases después:", dropdown.classList.toString());
    }

    // Handle power-up buttons
    document.querySelectorAll(".powerup-btn").forEach(btn => {
      btn.addEventListener("click", (e) => {
        e.stopPropagation();
        // Existing power-up functionality
        showPowerupModal(btn.dataset.playerId);
      });
    });

    // Confirm swap button
    confirmSwapBtn?.addEventListener('click', async () => {
      if (!selectedStarterId || !selectedBenchId) return;
      
      try {
        const res = await fetch("/api/swapStarter", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            starterId: selectedStarterId,
            benchId: selectedBenchId,
            leagueId,
            userId
          })
        });

        if (res.ok) {
          window.location.reload();
        } else {
          const error = await res.json();
          alert("Error: " + error.message);
        }
      } catch (err) {
        alert("Error al hacer el intercambio");
      }
    });

    function showSwapModal(starter) {
      if (!teamData) return;
      
      selectedStarterId = starter.id;
      selectedBenchId = null;
      
      // Find bench players of the same position
      const benchPlayersOfPosition = teamData.bench.filter(p => p.position === starter.position);
      
      // Update starter info
      starterInfo.innerHTML = `
        <div class="player-avatar">
          <span class="position-badge">${starter.position}</span>
        </div>
        <div class="player-details">
          <span class="player-name">${starter.name}</span>
          <span class="player-team">${starter.team}</span>
        </div>
      `;
      
      // Update position name for no bench message
      positionName.textContent = starter.position;
      
      if (benchPlayersOfPosition.length === 0) {
        // No bench players available
        benchOptions.classList.add('hidden');
        noBenchMessage.classList.remove('hidden');
        confirmSwapBtn.disabled = true;
      } else {
        // Show bench options
        benchOptions.classList.remove('hidden');
        noBenchMessage.classList.add('hidden');
        
        benchOptions.innerHTML = benchPlayersOfPosition.map(player => `
          <div class="bench-option" data-player-id="${player.id}">
            <div class="player-avatar">
              <span class="position-badge">${player.position}</span>
            </div>
            <div class="player-details">
              <span class="player-name">${player.name}</span>
              <span class="player-team">${player.team}</span>
            </div>
            <div class="player-meta">
              <span class="player-value">${player.value.toLocaleString()}€</span>
            </div>
          </div>
        `).join('');
        
        // Add click handlers to bench options
        benchOptions.querySelectorAll('.bench-option').forEach(option => {
          option.addEventListener('click', () => {
            // Remove previous selection
            benchOptions.querySelectorAll('.bench-option').forEach(opt => 
              opt.classList.remove('selected')
            );
            
            // Select this option
            option.classList.add('selected');
            selectedBenchId = option.dataset.playerId;
            confirmSwapBtn.disabled = false;
          });
        });
        
        confirmSwapBtn.disabled = true;
      }
      
      swapModal.classList.remove('hidden');
    }

    function closeSwapModal() {
      swapModal?.classList.add('hidden');
      selectedStarterId = null;
      selectedBenchId = null;
      
      // Clear selections
      benchOptions?.querySelectorAll('.bench-option').forEach(opt => 
        opt.classList.remove('selected')
      );
    }

    function showPowerupModal(playerId) {
      // Existing power-up modal functionality
      powerupModal?.classList.remove('hidden');
    }

    function closePowerupModal() {
      powerupModal?.classList.add('hidden');
    }

    // Backup function to extract team data from DOM
    function extractTeamDataFromDOM() {
      const starters = [];
      const bench = [];
      
      // Extract starters from position players
      document.querySelectorAll('.position-player').forEach(player => {
        const id = player.dataset.playerId;
        const position = player.dataset.position;
        const name = player.querySelector('.portrait-name')?.textContent || '';
        const team = player.querySelector('.portrait-team')?.textContent || '';
        
        if (id && position && name && team) {
          starters.push({
            id,
            name,
            position,
            team,
            value: 0, // No podemos extraer el valor desde el DOM del roster
            powerUp: null
          });
        }
      });
      
      // Extract bench from player cards
      document.querySelectorAll('.player-card.bench').forEach(card => {
        const id = card.dataset.playerId;
        const position = card.dataset.position;
        const name = card.querySelector('.player-name')?.textContent || '';
        const team = card.querySelector('.player-team')?.textContent || '';
        const valueText = card.querySelector('.player-value')?.textContent || '0';
        const value = parseInt(valueText.replace(/[^\d]/g, '')) || 0;
        
        if (id && position && name && team) {
          bench.push({
            id,
            name,
            position,
            team,
            value,
            powerUp: null
          });
        }
      });
      
      return {
        starters,
        bench,
        totalPlayers: starters.length + bench.length,
        totalValue: 0,
        budget: 0
      };
    }
  });
</script>